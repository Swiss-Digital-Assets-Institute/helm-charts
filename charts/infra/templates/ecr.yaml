{{- if and (.Values.aws.enabled | default true) .Values.aws.ecr.enabled }}
{{ include "infra.checkAwsMandates" . }}

{{- $hasRepoList := and .Values.aws.ecr.repoNames (gt (len .Values.aws.ecr.repoNames) 0) -}}
{{- if $hasRepoList -}}
  {{- range $i, $r := .Values.aws.ecr.repoNames }}
    {{- $fullRepo := (printf "%s/%s" $.Release.Namespace $r | replace " " "-" | lower) -}}
    {{- $k8sName := include "infra.ecrK8sName" (dict "root" $ "repo" $r) -}}
---
apiVersion: {{ include "infra.ecrApiVersion" $ }}
kind: Repository
metadata:
  name: {{ $k8sName }}
  namespace: {{ $.Release.Namespace }}
  annotations:
    crossplane.io/external-name: {{ $fullRepo }}
  labels:
    name: {{ $k8sName }}
{{ include "infra.allTags" (dict "Values" $.Values "section" $.Values.aws.ecr) | indent 4 }}
spec:
  forProvider:
    region: {{ $.Values.aws.region | quote }}
    imageTagMutability: {{ $.Values.aws.ecr.imageTagMutability | default "MUTABLE" | quote }}
    imageScanningConfiguration:
      scanOnPush: {{ $.Values.aws.ecr.scanOnPush | default false }}
    encryptionConfiguration:
      - encryptionType: "AES256"
    tags:
{{ include "infra.allTags" (dict "Values" $.Values "section" $.Values.aws.ecr) | indent 6 }}
  providerConfigRef:
    name: {{ $.Values.aws.providerConfigRef.name | quote }}

{{ if and $.Values.aws.ecr.accountAccessList (gt (len $.Values.aws.ecr.accountAccessList) 0) }}
---
apiVersion: {{ include "infra.ecrRepositoryPolictApiVersion" $ }}
kind: RepositoryPolicy
metadata:
  name: {{ $k8sName }}-repository-policy
  namespace: {{ $.Release.Namespace }}
  annotations:
    crossplane.io/external-name: {{ $fullRepo }}
  labels:
    name: {{ $k8sName }}-repository-policy
{{ include "infra.allTags" (dict "Values" $.Values "section" $.Values.aws.ecr) | indent 4 }}
spec:
  forProvider:
    region: {{ $.Values.aws.region | quote }}
    policy: |-
{{ include "infra.ecrRepositoryPolicy" $ | indent 6 }}
    repositorySelector:
      matchLabels:
        name: {{ $k8sName }}
  providerConfigRef:
    name: {{ $.Values.aws.providerConfigRef.name | quote }}
{{ end }}

{{ if $.Values.aws.ecr.lifecyclePolicy.rules }}
---
apiVersion: {{ include "infra.ecrLifecyclePolicyApiVersion" $ }}
kind: LifecyclePolicy
metadata:
  name: {{ $k8sName }}-lifecycle-policy
  namespace: {{ $.Release.Namespace }}
  annotations:
    crossplane.io/external-name: {{ $fullRepo }}
  labels:
    name: {{ $k8sName }}-lifecycle-policy
{{ include "infra.allTags" (dict "Values" $.Values "section" $.Values.aws.ecr) | indent 4 }}
spec:
  forProvider:
    policy: |-
      {
        "rules": [
{{ include "infra.ecrLifecyclePolicyRules" $ | indent 10 }}
        ]
      }
    region: {{ $.Values.aws.region | quote }}
    repository: {{ $fullRepo }}
  providerConfigRef:
    name: {{ $.Values.aws.providerConfigRef.name | quote }}
{{ end }}
  {{- end }}
{{- else -}}
{{- $k8sName := include "infra.ecrK8sName" (dict "root" .) -}}
---
apiVersion: {{ include "infra.ecrApiVersion" . }}
kind: Repository
metadata:
  name: {{ $k8sName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    crossplane.io/external-name: {{ include "infra.ecrRepoName" . | trim }}
{{- with .Values.aws.ecr.additionalAnnotations }}
{{ toYaml . | indent 4 }}
{{- end }}
  labels:
    name: {{ $k8sName }}
{{ include "infra.allTags" (dict "Values" .Values "section" .Values.aws.ecr) | indent 4 }}
spec:
  forProvider:
    region: {{ .Values.aws.region | quote }}
    imageTagMutability: {{ .Values.aws.ecr.imageTagMutability | default "MUTABLE" | quote }}
    imageScanningConfiguration:
      scanOnPush: {{ .Values.aws.ecr.scanOnPush | default false }}
    encryptionConfiguration:
      - encryptionType: "AES256"
    tags:
{{ include "infra.allTags" (dict "Values" .Values "section" .Values.aws.ecr) | indent 6 }}
  providerConfigRef:
    name: {{ .Values.aws.providerConfigRef.name | quote }}

{{- if and .Values.aws.ecr.accountAccessList (gt (len .Values.aws.ecr.accountAccessList) 0) }}
---
apiVersion: {{ include "infra.ecrRepositoryPolictApiVersion" . }}
kind: RepositoryPolicy
metadata:
  name: {{ $k8sName }}-repository-policy
  namespace: {{ .Release.Namespace }}
  annotations:
    crossplane.io/external-name: {{ include "infra.ecrRepoName" . | trim }}
  labels:
    name: {{ $k8sName }}-repository-policy
{{ include "infra.allTags" (dict "Values" .Values "section" .Values.aws.ecr) | indent 4 }}
spec:
  forProvider:
    region: {{ .Values.aws.region | quote }}
    policy: |-
{{ include "infra.ecrRepositoryPolicy" . | indent 6 }}
    repositorySelector:
      matchLabels:
        name: {{ $k8sName }}
  providerConfigRef:
    name: {{ .Values.aws.providerConfigRef.name | quote }}
{{- end }}

{{- if .Values.aws.ecr.lifecyclePolicy.rules }}
---
apiVersion: {{ include "infra.ecrLifecyclePolicyApiVersion" . }}
kind: LifecyclePolicy
metadata:
  name: {{ $k8sName }}-lifecycle-policy
  namespace: {{ .Release.Namespace }}
  annotations:
    crossplane.io/external-name: {{ include "infra.ecrRepoName" . | trim }}
  labels:
    name: {{ $k8sName }}-lifecycle-policy
{{ include "infra.allTags" (dict "Values" .Values "section" .Values.aws.ecr) | indent 4 }}
spec:
  forProvider:
    policy: |-
      {
        "rules": [
{{ include "infra.ecrLifecyclePolicyRules" . | indent 10 }}
        ]
      }
    region: {{ .Values.aws.region | quote }}
    repository: {{ include "infra.ecrRepoName" . | trim }}
  providerConfigRef:
    name: {{ .Values.aws.providerConfigRef.name | quote }}
{{- end }}
{{- end }}
{{- end }}
